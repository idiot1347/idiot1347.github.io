<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm | Lose yourself]]></title>
  <link href="http://idiot1347.github.io/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://idiot1347.github.io/"/>
  <updated>2014-07-13T19:46:14+08:00</updated>
  <id>http://idiot1347.github.io/</id>
  <author>
    <name><![CDATA[szk1347]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LeetCode: Binary Tree Preorder Traversal]]></title>
    <link href="http://idiot1347.github.io/blog/2014/07/13/leetcode-binary-tree-preorder-traversal/"/>
    <updated>2014-07-13T19:41:58+08:00</updated>
    <id>http://idiot1347.github.io/blog/2014/07/13/leetcode-binary-tree-preorder-traversal</id>
    <content type="html"><![CDATA[<h2>思路</h2>

<p>只是把隐式栈改成了显式栈罢了</p>

<h2>代码</h2>

<p>```cpp
/<em><em>
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode </em>left;
 *     TreeNode </em>right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:</p>

<pre><code>vector&lt;int&gt; preorderTraversal(TreeNode *root) {
    vector&lt;int&gt; ans;
    if (root == NULL) return ans;
    stack&lt;TreeNode *&gt; stk;
    TreeNode *x = root;
    while (true) {
        ans.push_back(x-&gt;val);
        if (x-&gt;left != NULL) {
            if (x-&gt;right != NULL) {
                stk.push(x-&gt;right);
            }
            x = x-&gt;left; // 先入栈，后修改x
        } else if (x-&gt;right != NULL) {
            x = x-&gt;right;
        } else if (!stk.empty()) {
            x = stk.top();
            stk.pop();
        } else {
            break;
        }
    }
    return ans;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode: Populating Next Right Pointers in Each Node]]></title>
    <link href="http://idiot1347.github.io/blog/2014/07/06/leetcode-populating-next-right-pointers-in-each-node/"/>
    <updated>2014-07-06T11:57:26+08:00</updated>
    <id>http://idiot1347.github.io/blog/2014/07/06/leetcode-populating-next-right-pointers-in-each-node</id>
    <content type="html"><![CDATA[<h2>思路</h2>

<p>就是一层一层的遍历，同时维护一个指针标记当前访问的左边的结点，本想用 bfs 但要用队列，不满足常数空间复杂度的要求；这里隐式用到了栈，是不是也不满足要求？（待解决）</p>

<p>碰到的问题：到达 max_depth 时忘了 return</p>

<h2>代码</h2>

<p>```cpp
/<em><em>
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode </em>left, </em>right, <em>next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 </em>/
class Solution {
public:</p>

<pre><code>void connect(TreeLinkNode *root) {
    int height = 0;
    TreeLinkNode *p = root;
    while (p != NULL) {
        ++height;
        p = p-&gt;left;
    }
    for (int i = 1;i &lt;= height;++i) {
        TreeLinkNode **p = new (TreeLinkNode *);
        *p = NULL;
        dfs(root, 0, i, p);
    }
}

void dfs(TreeLinkNode *current, int depth, int max_depth, TreeLinkNode **ptr) {
    if (depth == max_depth) {
        if (*ptr != NULL) {
            (*ptr)-&gt;next = current;
        }
        *ptr = current;
        return;
    }
    dfs(current-&gt;left, depth + 1, max_depth, ptr);
    dfs(current-&gt;right, depth + 1, max_depth, ptr);
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode: Search Insert Position]]></title>
    <link href="http://idiot1347.github.io/blog/2014/07/06/leetcode-search-insert-position/"/>
    <updated>2014-07-06T00:12:00+08:00</updated>
    <id>http://idiot1347.github.io/blog/2014/07/06/leetcode-search-insert-position</id>
    <content type="html"><![CDATA[<h2>　二分</h2>

<p>碰到的问题： 没有考虑到数组中所有数字都比 target 小</p>

<h2>　代码</h2>

<p>```cpp
class Solution {
public:</p>

<pre><code>int searchInsert(int A[], int n, int target) {
    int low = 0, high = n - 1;
    while (low &lt; high) {
        int mid = (low + high) / 2;
        if (A[mid] &lt; target)
            low = mid + 1;
        else
            high = mid;
    }
    if (A[low] &gt;= target)
        return low;
    return low + 1;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LeetCode: Sort List]]></title>
    <link href="http://idiot1347.github.io/blog/2014/07/05/leetcode-sort-list/"/>
    <updated>2014-07-05T23:45:49+08:00</updated>
    <id>http://idiot1347.github.io/blog/2014/07/05/leetcode-sort-list</id>
    <content type="html"><![CDATA[<p>重学基本的算法，以前还是太不用心，太急躁了。</p>

<h2>链表的快排</h2>

<p>写了挺久，碰到的主要问题是：</p>

<ol>
<li>分别排序两个子链表时没有把子链表的最后一个结点的 next 设为 NULL；</li>
<li>链接左子链表，head，右子链表时检查 u 是否为 NULL；</li>
<li>最坏时间复杂度：在划分时如果结点的值和 head 的值相同就根据结点序号的奇偶性来决定放到左子链表还是右子链表中；</li>
</ol>


<h2>代码</h2>

<p>```cpp
/<em><em>
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode </em>next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 </em>/
class Solution {
public:</p>

<pre><code>ListNode *sortList(ListNode *head) {
    //printf("%d\n", head);
    //if (head != NULL)
        //printf("%d %d\n", head-&gt;next, head-&gt;val);
    if (head == NULL || head-&gt;next == NULL) return head;
    //printf("c\n");
    ListNode *p = new ListNode(-1);
    ListNode *q = new ListNode(-1);
    ListNode *u = p;
    ListNode *v = q;
    ListNode *w = head-&gt;next;
    int idx = 0;
    while (w != NULL) {
        //printf("%d\n", w-&gt;val);
        if (w-&gt;val &lt; head-&gt;val)  {
            u-&gt;next = w;
            u = w;
        } else if (w-&gt;val &gt; head-&gt;val) {
            v-&gt;next = w;
            v = w;
        } else {
            if (idx &amp; 1) {
                u-&gt;next = w;
                u = w;
            } else {
                v-&gt;next = w;
                v = w;
            }
        }
        w = w-&gt;next;
        ++idx;
    }      
    u-&gt;next = NULL; //orz
    v-&gt;next = NULL; //orz
    u = sortList(p-&gt;next);
    v = sortList(q-&gt;next);
    if (u == NULL)
        u = head;
    w = u;
    //printf("u%d v%d w%d\n", u, v, w);
    //printf("%d %d %d\n", u-&gt;next, v-&gt;next, w-&gt;next);

    //printf("%d %d %d\n", w, w-&gt;next, w-&gt;next-&gt;next);
    while (w-&gt;next != NULL) {
        w = w-&gt;next;
        //printf("%d\n", w);
    }
    //printf("abc\n");
    if (u != head) //orz
        w-&gt;next = head;
    head-&gt;next = v;
    delete p;
    delete q;
    //printf("def\n");
    return u;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
</feed>
