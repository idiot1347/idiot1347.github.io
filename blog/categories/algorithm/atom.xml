<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm, | Lose yourself]]></title>
  <link href="http://idiot1347.github.io/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://idiot1347.github.io/"/>
  <updated>2014-07-06T00:02:02+08:00</updated>
  <id>http://idiot1347.github.io/</id>
  <author>
    <name><![CDATA[szk1347]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[LeetCode: Sort List]]></title>
    <link href="http://idiot1347.github.io/blog/2014/07/05/leetcode-sort-list/"/>
    <updated>2014-07-05T23:45:49+08:00</updated>
    <id>http://idiot1347.github.io/blog/2014/07/05/leetcode-sort-list</id>
    <content type="html"><![CDATA[<p>重学基本的算法，以前还是太不用心，太急躁了。</p>

<h2>链表的快排</h2>

<p>写了挺久，碰到的主要问题是：</p>

<ol>
<li>分别排序两个子链表时没有把子链表的最后一个结点的 next 设为 NULL；</li>
<li>链接左子链表，head，右子链表时检查 u 是否为 NULL；</li>
<li>最坏时间复杂度：在划分时如果结点的值和 head 的值相同就根据结点序号的奇偶性来决定放到左子链表还是右子链表中；</li>
</ol>


<p>上代码
```cpp
/<em><em>
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode </em>next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 </em>/
class Solution {
public:</p>

<pre><code>ListNode *sortList(ListNode *head) {
    //printf("%d\n", head);
    //if (head != NULL)
        //printf("%d %d\n", head-&gt;next, head-&gt;val);
    if (head == NULL || head-&gt;next == NULL) return head;
    //printf("c\n");
    ListNode *p = new ListNode(-1);
    ListNode *q = new ListNode(-1);
    ListNode *u = p;
    ListNode *v = q;
    ListNode *w = head-&gt;next;
    int idx = 0;
    while (w != NULL) {
        //printf("%d\n", w-&gt;val);
        if (w-&gt;val &lt; head-&gt;val)  {
            u-&gt;next = w;
            u = w;
        } else if (w-&gt;val &gt; head-&gt;val) {
            v-&gt;next = w;
            v = w;
        } else {
            if (idx &amp; 1) {
                u-&gt;next = w;
                u = w;
            } else {
                v-&gt;next = w;
                v = w;
            }
        }
        w = w-&gt;next;
        ++idx;
    }      
    u-&gt;next = NULL; //orz
    v-&gt;next = NULL; //orz
    u = sortList(p-&gt;next);
    v = sortList(q-&gt;next);
    if (u == NULL)
        u = head;
    w = u;
    //printf("u%d v%d w%d\n", u, v, w);
    //printf("%d %d %d\n", u-&gt;next, v-&gt;next, w-&gt;next);

    //printf("%d %d %d\n", w, w-&gt;next, w-&gt;next-&gt;next);
    while (w-&gt;next != NULL) {
        w = w-&gt;next;
        //printf("%d\n", w);
    }
    //printf("abc\n");
    if (u != head) //orz
        w-&gt;next = head;
    head-&gt;next = v;
    delete p;
    delete q;
    //printf("def\n");
    return u;
}
</code></pre>

<p>};
```</p>
]]></content>
  </entry>
  
</feed>
